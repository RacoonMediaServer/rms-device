version: '3'
services:
  etcd:
    image: bitnami/etcd
    container_name: etcd
    restart: always
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379,http://${INTERFACE_IP}:2379
    ports:
      - "2379:2379"
      - "2380:2380"

  mongo:
    image: mongo
    restart: always
    container_name: mongo
    ports:
      - "0.0.0.0:27017:27017" # for debug
    volumes:
      - ${DATA}/mongo/db:/data/db
      - ${DATA}/mongo/dump:/dump  

  postgres:
    image: postgres:alpine
    restart: always
    container_name: postgres
    volumes:
      - ./postgres:/docker-entrypoint-initdb.d/
      - ${DATA}/postgres:/var/lib/postgresql/data
      - ${DATA}/artifacts.bak:/artifacts
    environment:
      - POSTGRES_MULTIPLE_DATABASES=${POSTGRES_DATABASES}
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=qweasd123      

  gateway:
    image: traefik:latest
    container_name: gateway
    restart: always
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock    

  nextcloud:
    image: nextcloud:26
    restart: always
    container_name: nextcloud
    volumes:
      - ${DATA}/nextcloud:/var/www/html
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=nextcloud
      - POSTGRES_USER=user_nextcloud
      - POSTGRES_PASSWORD=qweasd123
      - NEXTCLOUD_ADMIN_USER=${USER}
      - NEXTCLOUD_ADMIN_PASSWORD=${PASSWORD}
      - NEXTCLOUD_TRUSTED_DOMAINS="nc.rms.intra nextcloud"
      - PHP_UPLOAD_LIMIT=40G
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud.rule=Host(`nc.rms.intra`)"
      - "traefik.http.services.nextcloud.loadbalancer.server.port=80"
    depends_on:
      - postgres
      - gateway

  gitea:
    image: gitea/gitea:1.21.3
    restart: always
    container_name: gitea
    volumes:
      - ${DATA}/git:/data
      - ${DATA}/artifacts.bak:/artifacts
    environment:
      - ROOT_URL="http://git.rms.intra/"
      - APP_NAME="Gitea:My private Git repository"
      - USER_UID=1000
      - USER_GID=1000
      - DISABLE_REGISTRATION=true
      - REQUIRE_SIGNIN_VIEW=true
      - DB_TYPE=postgres
      - DB_HOST=postgres:5432
      - DB_NAME=gitea
      - DB_USER=gitea
      - DB_PASSWD=qweasd123
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.gitea.loadbalancer.server.port=3000"
      - "traefik.http.routers.gitea.rule=Host(`git.rms.intra`)"
    depends_on:
      - postgres
      - gateway

  web:
    image: racoonmediaserver/web:latest
    restart: always
    container_name: web
    volumes:
      - ./rms-web/rms-web.json:/etc/rms/rms-web.json 
      - ${MEDIA}/library:/media
      - ${MEDIA}/backup:/backup
    environment:
      - RMS_CCTV_ENABLED=true
      - RMS_CONTENT_BACKUPS=/backup
      - TZ=Europe/Moscow
      - MICRO_REGISTRY=etcd
      - MICRO_REGISTRY_ADDRESS=etcd:2379
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`rms.intra`)"
      - "traefik.http.services.web.loadbalancer.server.port=8080"
      - "com.centurylinklabs.watchtower.enable=true"     
    depends_on:
      - gateway
      - etcd

  bot-client:
    image: racoonmediaserver/bot-client:latest
    restart: always
    container_name: bot-client
    environment:
      - TZ=Europe/Moscow
      - RMS_DEVICE=${DEVICE}
      - RMS_REMOTE_HOST=${REMOTE_HOST}
      - RMS_REMOTE_PORT=${REMOTE_PORT}
      - MICRO_REGISTRY=etcd
      - MICRO_REGISTRY_ADDRESS=etcd:2379
      - RMS_CONTENT-DIRECTORY=/media
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    volumes:
      - ${MEDIA}/library:/media
    depends_on:
      - etcd

  torrent:
    image: racoonmediaserver/torrent:latest
    restart: always
    container_name: torrent
    environment:
      - RMS_DATABASE_HOST=postgres
      - MICRO_REGISTRY=etcd
      - MICRO_REGISTRY_ADDRESS=etcd:2379
    volumes:
      - ${MEDIA}/library/torrents:/media/library/torrents
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    depends_on:
      - postgres
      - etcd

  library:
    image: racoonmediaserver/library:latest
    restart: always
    container_name: library
    environment:
      - RMS_DEVICE=${DEVICE}
      - RMS_DATABASE=mongodb://mongo:27017/library
      - RMS_REMOTE_HOST=${REMOTE_HOST}
      - RMS_REMOTE_PORT=${REMOTE_PORT}
      - MICRO_BROKER_ADDRESS=0.0.0.0:5531
      - MICRO_REGISTRY=etcd
      - MICRO_REGISTRY_ADDRESS=etcd:2379
    volumes:
      - ${MEDIA}/library:/media/library
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    depends_on:
      - mongo
      - etcd

  notifier:
    image: racoonmediaserver/notifier:latest
    restart: always
    container_name: notifier
    environment:
      - TZ=Europe/Moscow
      - RMS_DEVICE=${DEVICE}
      - RMS_DATABASE=mongodb://mongo:27017/notifier
      - RMS_REMOTE_HOST=${REMOTE_HOST}
      - RMS_REMOTE_PORT=${REMOTE_PORT}
      - MICRO_BROKER_ADDRESS=0.0.0.0:5531
      - MICRO_REGISTRY=etcd
      - MICRO_REGISTRY_ADDRESS=etcd:2379
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    depends_on:
      - mongo
      - etcd

  notes:
    image: racoonmediaserver/notes:latest
    restart: always
    container_name: notes
    environment:
      - TZ=Europe/Moscow
      - RMS_DATABASE_HOST=postgres
      - MICRO_REGISTRY=etcd
      - MICRO_REGISTRY_ADDRESS=etcd:2379
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    depends_on:
      - bot-client
      - nextcloud
      - etcd

  backup:
    image: racoonmediaserver/backup:latest
    restart: always
    container_name: backup
    environment:
      - TZ=Europe/Moscow
      - RMS_DATABASE_HOST=postgres
      - RMS_SERVICES_NEXTCLOUD_DATA=/data/nc
      - RMS_DEBUG_VERBOSE=true
      - MICRO_REGISTRY=etcd
      - MICRO_REGISTRY_ADDRESS=etcd:2379
    volumes:
      - ${MEDIA}/backup:/backups
      - ${DATA}/artifacts.bak:/artifacts
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DATA}/nextcloud:/data/nc:ro
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    depends_on:
      - postgres
      - etcd

  cctv:
    image: racoonmediaserver/cctv:latest
    restart: always
    container_name: cctv
    environment:
      - TZ=Europe/Moscow
      - RMS_DATABASE_HOST=postgres
      - RMS_DEBUG_VERBOSE=true
      - MICRO_REGISTRY=etcd
      - MICRO_REGISTRY_ADDRESS=etcd:2379
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    depends_on:
      - postgres
      - etcd

  transcoder:
    image: racoonmediaserver/transcoder:latest
    restart: always
    container_name: transcoder
    environment:
      - TZ=Europe/Moscow
      - RMS_DATABASE_HOST=postgres
      - RMS_DEBUG_VERBOSE=true
      - MICRO_REGISTRY=etcd
      - MICRO_REGISTRY_ADDRESS=etcd:2379
      - RMS_TRANSCODING_DIRECTORY=/media
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    volumes:
      - ${MEDIA}/library:/media
    depends_on:
      - postgres
      - etcd

  speech:
    image: racoonmediaserver/speech:latest
    restart: always
    container_name: speech
    environment:
      - TZ=Europe/Moscow
      - RMS_DEBUG_VERBOSE=true
      - MICRO_REGISTRY=etcd
      - MICRO_REGISTRY_ADDRESS=etcd:2379
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    volumes:
      - ${MEDIA}/models:/root/.cache/whisper
    depends_on:
      - etcd  

  dlna:
    container_name: dlna
    build: ./serviio
    restart: always
    environment:
      - RMS_IP_ADDR=${INTERFACE_IP}
    volumes:
      - ./serviio/config:/opt/serviio/config
      - ${MEDIA}/library:/media/library
    network_mode: "host"

  watchtower:
    image: containrrr/watchtower
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 30 --label-enable


  nfs:
    image: itsthenetwork/nfs-server-alpine:12
    container_name: nfs
    restart: always
    privileged: true
    environment:
      - SHARED_DIRECTORY=/data
    volumes:
      - ${MEDIA}:/data
    ports:
      - 2049:2049

  cloudflared:
    container_name: cloudflared
    image: crazymax/cloudflared:latest
    ports:
      - "5053:5053/udp"
    restart: always
    network_mode: "host"

  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "9991:80/tcp"
    environment:
      TZ: 'Russia/Moscow'
      WEBPASSWORD: 'qweasd123'
      REV_SERVER_DOMAIN: 'dns.rms.intra'
      ServerIP: '${INTERFACE_IP}'
      VIRTUAL_HOST: 'dns.rms.intra'
    volumes:
      - './etc-pihole:/etc/pihole'
      - './etc-dnsmasq.d:/etc/dnsmasq.d'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pihole.rule=Host(`dns.rms.intra`)"
      - "traefik.http.services.pihole.loadbalancer.server.port=80"
    restart: always